/*
GooeyFiApp.cpp
    
MIT License

Copyright (c) 2016 cbtek

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
//----------------------------------------
//GooeyFiApp.cpp generated by CBTek Solutions on 02-16-2017 at 06:37:23 PM
//----------------------------------------
#include "GooeyFiApp.h"
#include "GooeyFiWidgetFactory.h"
#include "GooeyFiLayoutManager.hpp"
#include "GooeyFiGridLayoutManager.h"
#include "GooeyFiVerticalLayoutManager.h"
#include "GooeyFiHorizontalLayoutManager.h"
#include "GooeyFiWidgetImpl.h"

#include "utility/inc/Exception.hpp"
#include "utility/inc/XMLReader.h"
#include "utility/inc/XMLStreamWriter.h"

#include <sstream>

using namespace cbtek::common::utility;

namespace cbtek {
namespace products {
namespace gooeyfi {
namespace core {

namespace constants
{
}
GooeyFiApp::GooeyFiApp(const std::string &filePath)
{
    m_currentFilePath = filePath;
}

void GooeyFiApp::addPage(const GooeyFiWidgetPage &page)
{
    m_pages.push_back(page);
}

const GooeyFiWidgetPage &GooeyFiApp::getPage(size_t index) const
{
    if (index < m_pages.size())
    {
        return m_pages[index];
    }
    throw IndexOutOfRangeException(EXCEPTION_TAG_LINE+"Index out of range for Widget Page");
}

size_t GooeyFiApp::getPageCount() const
{
    return m_pages.size();
}

const std::vector<GooeyFiWidgetPage> &GooeyFiApp::getPages() const
{
    return m_pages;
}

void GooeyFiApp::setPages(const std::vector<GooeyFiWidgetPage> &pages)
{
    m_pages=pages;
}

void GooeyFiApp::read()
{
    XMLReader reader;
    reader.load(this->m_currentFilePath);
    XMLDataElement * root = reader.getElement("gooeyapp");

    if (root)
    {
        size_t pageCount = root->getNumChildren();
        for (size_t a1 = 0;a1 < pageCount ;++a1)
        {
            XMLDataElement * xmlPage = root->getChildAt(a1);
            if (xmlPage)
            {
                GooeyFiWidgetPage page;
                page.setTitle(xmlPage->getAttributeValue("title"));
                size_t widgetCount = xmlPage->getNumChildren();
                for (size_t a2 = 0; a2 < widgetCount; ++a2)
                {
                    XMLDataElement * xmlWidget = xmlPage->getChildAt(a2);

                    if (xmlWidget)
                    {
                        std::string widgetStr;
                        for(const std::pair<std::string,std::string>& attribute : xmlWidget->getAttributes())
                        {
                            widgetStr+= StringUtils::toUpper(attribute.first)+":"+attribute.second+",";
                        }
                        GooeyFiWidgetPtr widget = GooeyFiWidgetFactory::create(widgetStr);
                        page.addWidget(widget);

                    }
                }
                m_pages.push_back(page);
            }
        }
    }
}

void GooeyFiApp::write()
{
    std::ostringstream out;
    XMLStreamWriter xml(out);
    xml.writeStartDocument();
    xml.writeStartElement("GooeyFiApp");
    xml.writeAttribute("title",m_title);
    xml.writeAttribute("icon","");
    for(const GooeyFiWidgetPage& page : m_pages)
    {
        xml.writeStartElement("GooeyFiPage");
        xml.writeAttribute("title",page.getTitle());
        xml.writeAttribute("layout",getLayoutTypeString(page.getLayout()->getType()));
        for(const GooeyFiWidgetPtr& widgetPtr : page.getLayout()->getWidgets())
        {
            const GooeyFiWidgetImpl *impl = dynamic_cast <const GooeyFiWidgetImpl*>(widgetPtr.get());

            if (impl)
            {
                xml.writeStartElement("GooeyFiWidget");
                xml.writeAttribute("id",impl->getId());
                xml.writeAttribute("label",impl->getLabel());
                xml.writeAttribute("type",getWidgetTypeStr(impl->getWidgetType()));
                widgetPtr->write(xml);
                xml.writeEndElement();
            }

        }
        xml.writeEndElement();
    }
  xml.writeEndElement();
std::cerr << out.str() << std::endl;
}

GooeyFiApp::~GooeyFiApp()
{

}




}}}}//end namespace


